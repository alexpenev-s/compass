// Code generated by mockery v2.5.1. DO NOT EDIT.

package automock

import (
	context "context"

	model "github.com/kyma-incubator/compass/components/director/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// BundleInstanceAuthService is an autogenerated mock type for the BundleInstanceAuthService type
type BundleInstanceAuthService struct {
	mock.Mock
}

// AssociateBundleInstanceAuthForNewApplicationScenarios provides a mock function with given fields: ctx, existingScenarios, inputScenarios, appId
func (_m *BundleInstanceAuthService) AssociateBundleInstanceAuthForNewApplicationScenarios(ctx context.Context, existingScenarios []string, inputScenarios []string, appId string) error {
	ret := _m.Called(ctx, existingScenarios, inputScenarios, appId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, []string, string) error); ok {
		r0 = rf(ctx, existingScenarios, inputScenarios, appId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetForAppAndAnyMatchingScenarios provides a mock function with given fields: ctx, appId, scenarios
func (_m *BundleInstanceAuthService) GetForAppAndAnyMatchingScenarios(ctx context.Context, appId string, scenarios []string) ([]*model.BundleInstanceAuth, error) {
	ret := _m.Called(ctx, appId, scenarios)

	var r0 []*model.BundleInstanceAuth
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) []*model.BundleInstanceAuth); ok {
		r0 = rf(ctx, appId, scenarios)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.BundleInstanceAuth)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, []string) error); ok {
		r1 = rf(ctx, appId, scenarios)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
