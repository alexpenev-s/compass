// Code generated by mockery v2.5.1. DO NOT EDIT.

package automock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// BundleInstanceAuthService is an autogenerated mock type for the BundleInstanceAuthService type
type BundleInstanceAuthService struct {
	mock.Mock
}

// AssociateBundleInstanceAuthForNewApplicationScenarios provides a mock function with given fields: ctx, existingScenarios, inputScenarios, appId
func (_m *BundleInstanceAuthService) AssociateBundleInstanceAuthForNewApplicationScenarios(ctx context.Context, existingScenarios []string, inputScenarios []string, appId string) error {
	ret := _m.Called(ctx, existingScenarios, inputScenarios, appId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, []string, string) error); ok {
		r0 = rf(ctx, existingScenarios, inputScenarios, appId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsAnyExistForAppAndScenario provides a mock function with given fields: ctx, scenarios, appId
func (_m *BundleInstanceAuthService) IsAnyExistForAppAndScenario(ctx context.Context, scenarios []string, appId string) (bool, error) {
	ret := _m.Called(ctx, scenarios, appId)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, []string, string) bool); ok {
		r0 = rf(ctx, scenarios, appId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []string, string) error); ok {
		r1 = rf(ctx, scenarios, appId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
