// Code generated by mockery v2.5.1. DO NOT EDIT.

package automock

import (
	context "context"

	model "github.com/kyma-incubator/compass/components/director/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// LabelService is an autogenerated mock type for the LabelService type
type LabelService struct {
	mock.Mock
}

// UpsertLabel provides a mock function with given fields: ctx, tenant, labelInput
func (_m *LabelService) UpsertLabel(ctx context.Context, tenant string, labelInput *model.LabelInput) error {
	ret := _m.Called(ctx, tenant, labelInput)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *model.LabelInput) error); ok {
		r0 = rf(ctx, tenant, labelInput)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpsertScenarios provides a mock function with given fields: ctx, tenantID, labels, newScenarios, mergeFn
func (_m *LabelService) UpsertScenarios(ctx context.Context, tenantID string, labels []model.Label, newScenarios []string, mergeFn func([]string, []string) []string) error {
	ret := _m.Called(ctx, tenantID, labels, newScenarios, mergeFn)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []model.Label, []string, func([]string, []string) []string) error); ok {
		r0 = rf(ctx, tenantID, labels, newScenarios, mergeFn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
