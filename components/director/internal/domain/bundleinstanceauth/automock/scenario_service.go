// Code generated by mockery v2.5.1. DO NOT EDIT.

package automock

import (
	context "context"

	model "github.com/kyma-incubator/compass/components/director/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// ScenarioService is an autogenerated mock type for the ScenarioService type
type ScenarioService struct {
	mock.Mock
}

// GetApplicationScenarioLabelsForAnyMatchingScenario provides a mock function with given fields: ctx, scenarios
func (_m *ScenarioService) GetApplicationScenarioLabelsForAnyMatchingScenario(ctx context.Context, scenarios []string) ([]model.Label, error) {
	ret := _m.Called(ctx, scenarios)

	var r0 []model.Label
	if rf, ok := ret.Get(0).(func(context.Context, []string) []model.Label); ok {
		r0 = rf(ctx, scenarios)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Label)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, scenarios)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBundleInstanceAuthsScenarioLabels provides a mock function with given fields: ctx, appId, runtimeId
func (_m *ScenarioService) GetBundleInstanceAuthsScenarioLabels(ctx context.Context, appId string, runtimeId string) ([]model.Label, error) {
	ret := _m.Called(ctx, appId, runtimeId)

	var r0 []model.Label
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []model.Label); ok {
		r0 = rf(ctx, appId, runtimeId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Label)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, appId, runtimeId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRuntimeScenarioLabelsForAnyMatchingScenario provides a mock function with given fields: ctx, scenarios
func (_m *ScenarioService) GetRuntimeScenarioLabelsForAnyMatchingScenario(ctx context.Context, scenarios []string) ([]model.Label, error) {
	ret := _m.Called(ctx, scenarios)

	var r0 []model.Label
	if rf, ok := ret.Get(0).(func(context.Context, []string) []model.Label); ok {
		r0 = rf(ctx, scenarios)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Label)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, scenarios)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetScenarioNamesForApplication provides a mock function with given fields: ctx, applicationID
func (_m *ScenarioService) GetScenarioNamesForApplication(ctx context.Context, applicationID string) ([]string, error) {
	ret := _m.Called(ctx, applicationID)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, applicationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, applicationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetScenarioNamesForRuntime provides a mock function with given fields: ctx, runtimeID
func (_m *ScenarioService) GetScenarioNamesForRuntime(ctx context.Context, runtimeID string) ([]string, error) {
	ret := _m.Called(ctx, runtimeID)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, runtimeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, runtimeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
