// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	persistence "github.com/kyma-incubator/compass/components/director/pkg/persistence"
)

// Transact is an autogenerated mock type for the Transact type
type Transact struct {
	mock.Mock
}

// Begin provides a mock function with given fields:
func (_m *Transact) Begin() (persistence.PersistenceTx, error) {
	ret := _m.Called()

	var r0 persistence.PersistenceTx
	if rf, ok := ret.Get(0).(func() persistence.PersistenceTx); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(persistence.PersistenceTx)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Commit provides a mock function with given fields:
func (_m *Transact) Commit() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RollbackUnlessCommitted provides a mock function with given fields: ctx, tx
func (_m *Transact) RollbackUnlessCommitted(ctx context.Context, tx persistence.PersistenceTx) bool {
	ret := _m.Called(ctx, tx)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, persistence.PersistenceTx) bool); ok {
		r0 = rf(ctx, tx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

type mockConstructorTestingTNewTransact interface {
	mock.TestingT
	Cleanup(func())
}

// NewTransact creates a new instance of Transact. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTransact(t mockConstructorTestingTNewTransact) *Transact {
	mock := &Transact{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
