// Code generated by mockery. DO NOT EDIT.

package automock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// DestinationManager is an autogenerated mock type for the DestinationManager type
type DestinationManager struct {
	mock.Mock
}

// FetchDestinationsSensitiveData provides a mock function with given fields: ctx, subaccountID, destinationNames
func (_m *DestinationManager) FetchDestinationsSensitiveData(ctx context.Context, subaccountID string, destinationNames []string) ([]byte, error) {
	ret := _m.Called(ctx, subaccountID, destinationNames)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) []byte); ok {
		r0 = rf(ctx, subaccountID, destinationNames)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, []string) error); ok {
		r1 = rf(ctx, subaccountID, destinationNames)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SyncSubaccountDestinations provides a mock function with given fields: ctx, subaccountID
func (_m *DestinationManager) SyncSubaccountDestinations(ctx context.Context, subaccountID string) error {
	ret := _m.Called(ctx, subaccountID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, subaccountID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewDestinationManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewDestinationManager creates a new instance of DestinationManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDestinationManager(t mockConstructorTestingTNewDestinationManager) *DestinationManager {
	mock := &DestinationManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
