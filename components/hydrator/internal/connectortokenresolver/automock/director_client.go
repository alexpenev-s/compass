// Code generated by mockery v2.10.0. DO NOT EDIT.

package automock

import (
	context "context"

	graphql "github.com/kyma-incubator/compass/components/director/pkg/graphql"
	mock "github.com/stretchr/testify/mock"
)

// DirectorClient is an autogenerated mock type for the DirectorClient type
type DirectorClient struct {
	mock.Mock
}

// GetSystemAuthByToken provides a mock function with given fields: ctx, token
func (_m *DirectorClient) GetSystemAuthByToken(ctx context.Context, token string) (graphql.SystemAuth, error) {
	ret := _m.Called(ctx, token)

	var r0 graphql.SystemAuth
	if rf, ok := ret.Get(0).(func(context.Context, string) graphql.SystemAuth); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(graphql.SystemAuth)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InvalidateSystemAuthOneTimeToken provides a mock function with given fields: ctx, authID
func (_m *DirectorClient) InvalidateSystemAuthOneTimeToken(ctx context.Context, authID string) (graphql.SystemAuth, error) {
	ret := _m.Called(ctx, authID)

	var r0 graphql.SystemAuth
	if rf, ok := ret.Get(0).(func(context.Context, string) graphql.SystemAuth); ok {
		r0 = rf(ctx, authID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(graphql.SystemAuth)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, authID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
