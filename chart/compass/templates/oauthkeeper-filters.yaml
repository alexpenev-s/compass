#apiVersion: networking.istio.io/v1alpha3
#kind: EnvoyFilter
#metadata:
#  name: x-authz-oathkeeper-header-rewrite
#  namespace: kyma-system
#spec:
#  workloadSelector:
#    labels:
#      app.kubernetes.io/name: oathkeeper
#  configPatches:
#    - applyTo: HTTP_FILTER
#      match:
#        context: SIDECAR_OUTBOUND
#        listener:
#          filterChain:
#            filter:
#              name: envoy.filters.network.http_connection_manager
#              subFilter:
#                name: "envoy.filters.http.router"
#      patch:
#        operation: INSERT_BEFORE
#        value:
#          name: envoy.filters.http.lua.x_authz_header
#          typed_config:
#            "@type": "type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua"
#            inlineCode: |
#              function envoy_on_request(request_handle)
#                request_handle:logCritical("envoy_on_request >>> x-authz-oathkeeper-header-rewrite filter")
#                local headers = request_handle:headers()
#                local authz = headers:get("Authorization")
#                if authz ~= nil then
#                  headers:add("X-Authorization", authz)
#                  request_handle:logCritical("Successfully rewrote authz to x-authz header")
#                else
#                  request_handle:logCritical("Authz header not found so no rewritting to x-authz was done")
#                end
#              end
#---
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: inject-sa-token-filter
  namespace: kyma-system
spec:
  workloadSelector:
    labels:
      app.kubernetes.io/name: oathkeeper
  configPatches:
    - applyTo: HTTP_FILTER
      match:
        context: SIDECAR_OUTBOUND
        listener:
          filterChain:
            filter:
              name: envoy.filters.network.http_connection_manager
              subFilter:
                name: "envoy.filters.http.router"
      patch:
        operation: INSERT_BEFORE
        value:
          name: envoy.filters.http.lua.service_account_token
          typed_config:
            "@type": "type.googleapis.com/envoy.config.filter.http.lua.v2.Lua"
            inlineCode: |
              local function read_file(path)
                local file = io.open(path, "rb")
                if not file then return nil end
                local content = file:read "*a"
                file:close()
                return content
              end
              function envoy_on_request(request_handle)
                request_handle:logCritical("envoy_on_request >>> Service Account token override filter")
                  request_handle:logCritical("No Authz header found. Will inject SA token as authz header!")

                  local token = read_file("/var/run/secrets/kubernetes.io/serviceaccount/token");
                  if token~='' then
                    request_handle:headers():replace("X-Authorization", "Bearer "..token)
                    request_handle:logCritical("Successfully injected SA Token as Authz header")
                  else
                    request_handle:logError("Could not find SA token on filesystem!.")
                  end
              end